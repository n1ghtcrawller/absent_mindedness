import React, { useState, useEffect } from 'react';
import './ShareMessageButton.css';
import CustomButton from '../../components/Button/CustomButton';

const ShareMessageButton = () => {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [successMessage, setSuccessMessage] = useState(null);
    const [messageId, setMessageId] = useState(null);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        if (Telegram.WebApp.initDataUnsafe?.message) {
            setMessageId(Telegram.WebApp.initDataUnsafe.message.message_id);
        }
    }, []);

    const handleShareMessage = () => {
        setError(null);
        setSuccessMessage(null);
        setLoading(true);

        if (!messageId) {
            setError('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            setLoading(false);
            return;
        }

        try {
            Telegram.WebApp.shareMessage(
                messageId,
                (isSent) => {
                    if (isSent) {
                        setSuccessMessage('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                    } else {
                        setError('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
                    }
                    setLoading(false);
                }
            );
        } catch (error) {
            setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + error.message);
            setLoading(false);
        }
    };

    return (
        <div className="share-message-container">
            <div className="message-content">
                {/* –í–∞—à–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ */}

                <div className="share-button-wrapper">
                    {error && <div className="error-message">{error}</div>}
                    {successMessage && <div className="success-message">{successMessage}</div>}

                    <CustomButton
                        label={loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'}
                        onClick={handleShareMessage}
                        disabled={loading || !messageId}
                        icon="üì®"
                        className="share-button"
                    />
                </div>
            </div>
        </div>
    );
};

export default ShareMessageButton;