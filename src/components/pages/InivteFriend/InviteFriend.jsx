import React, { useState } from 'react';
import './InviteFriend.css';
import CustomButton from '../../components/Button/CustomButton';

const ShareMessageButton = () => {
    const [loading, setLoading] = useState(false);  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const [error, setError] = useState(null);  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏
    const [successMessage, setSuccessMessage] = useState(null);  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—Ö–∞
    const [logs, setLogs] = useState([]);  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    const handleShareMessage = () => {
        setLoading(true);  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setError(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        setSuccessMessage(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        setLogs((prevLogs) => [...prevLogs, '–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...']);

        try {
            if (window.Telegram && window.Telegram.WebApp) {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                window.Telegram.WebApp.shareMessage(
                    'https://t.me/AbMindBot?start=share', // –°—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
                    (isSent) => {
                        if (isSent) {
                            setSuccessMessage('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
                            setLogs((prevLogs) => [...prevLogs, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!']); // –õ–æ–≥ —É—Å–ø–µ—Ö–∞
                        } else {
                            setError('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
                            setLogs((prevLogs) => [...prevLogs, '–û—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.']); // –õ–æ–≥ –æ—Ç–º–µ–Ω—ã
                        }
                        setLoading(false);
                    }
                );
            } else {
                setError('WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
                setLogs((prevLogs) => [...prevLogs, 'WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω']); // –õ–æ–≥ –æ—à–∏–±–∫–∏
                setLoading(false);
            }
        } catch (err) {
            setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + err.message);
            setLogs((prevLogs) => [...prevLogs, '–û—à–∏–±–∫–∞: ' + err.message]); // –õ–æ–≥ –æ—à–∏–±–∫–∏
            setLoading(false);
        }
    };

    return (
        <div className="share-message-container">
            <div className="message-content">
                <div className="share-button-wrapper">
                    {error && <div className="error-message">{error}</div>} {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ */}
                    {successMessage && <div className="success-message">{successMessage}</div>} {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞ */}

                    <CustomButton
                        label={loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'}
                        onClick={handleShareMessage}
                        disabled={loading}  // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
                        icon="üì®"
                        className="share-button"
                    />
                </div>

                {/* –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –Ω–∞ —ç–∫—Ä–∞–Ω */}
                <div className="logs-container">
                    <h3>–õ–æ–≥–∏:</h3>
                    <ul>
                        {logs.map((log, index) => (
                            <li key={index}>{log}</li>
                        ))}
                    </ul>
                </div>
            </div>
        </div>
    );
};

export default ShareMessageButton;
